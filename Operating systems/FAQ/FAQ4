#include <stdio.h>
#include <dirent.h>
#include <string.h>
#include <stdlib.h>
#include <sys/stat.h>
#include <sys/types.h>
#include <fcntl.h>
#include <unistd.h>
#include <assert.h>
#include <sys/wait.h>
#include <time.h>
#include <limits.h>
#include <math.h>
#include <signal.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <sys/msg.h>
#include <ctype.h>

key_t key = ftok("sync", 123123);


shmid = shmget(key, SIZE, IPC_CREAT | 0666);
str = (char *)shmat(shmid, NULL, 0);
int *num_arr = (int *)shmat(shmid, NULL, 0);
shmdt(str);
shmctl(shmid, IPC_RMID, NULL);


int semid = semget(key, 2, IPC_CREAT | 0666);
semctl(semid, 0, SETVAL, 1);
semctl(semid, 0, SETALL, arr);
semop(semid, (struct sembuf []){{ 0, -1, SEM_UNDO }}, 1);
semop(semid, (struct sembuf []) {{ 1, 1, SEM_UNDO }}, 1);
semctl(semid, 0, IPC_RMID, 0);



struct msgbuf {
    long mtype;
    char mtext[1024];
};
struct msgbuf rcv;



int msgid1 = msgget(key1, IPC_CREAT | 0666);
snd.mtype = 1;
sprintf(snd.mtext, "%d", num + 1);
msgsnd(msgid2, &snd, sizeof(snd.mtext), 0);
msgrcv(msgid1, &rcv, sizeof(rcv.mtext), 0, 0);
sscanf(rcv.mtext, "%d", &num);
msgctl(msgid1, IPC_RMID, 0);


