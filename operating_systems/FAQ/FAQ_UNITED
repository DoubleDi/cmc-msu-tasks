gcc -Wall -Werror -std=gnu11 4.c -o4


#include <stdio.h>
#include <dirent.h>
#include <string.h>
#include <stdlib.h>
#include <sys/stat.h>
#include <sys/types.h>
#include <fcntl.h>
#include <unistd.h>
#include <assert.h>
#include <sys/wait.h>
#include <time.h>
#include <limits.h>
#include <math.h>
#include <signal.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <sys/msg.h>
#include <ctype.h>
	
enum 
{
    A = 4, 
    B = 5
}

//cчитываем следующий элемент
enum { BUFS = 16 };
unsigned char buf[BUFS];
int nr = 0, ind;

int
get(int fd)
{
    if (nr == ind) {
        nr = read(fd, buf, BUFS);
        ind = 0;
    }
    if (!nr)
        return -1;
    return buf[ind++];
}


//читаем структуру
void
read_file(int fd, void *p, size_t sz)
{
    char *pp = p;
    ssize_t read_size;
    while (sz > 0) {
        read_size = read(fd, pp, sz);
        sz -= read_size;
        pp += read_size;
    }
}

// читаем поля структуры
void
read_file(int fd, struct Data *p)
{
    int sz = I;
    char *pp = (char *)(&p->x);
    ssize_t read_size = 0;
    while (sz > 0) {
        read_size = read(fd, pp, sz);
        pp += read_size;
        sz -= read_size;
    }
    read_size = 0;
    sz = LL;
    pp = (char *)(&p->y);
    while (sz > 0) {
        read_size = read(fd, pp, sz);
        pp += read_size;
        sz -= read_size;
    }
}


// выводим поля структуры
void
write_file(int fd, struct Data *p)
{
    int sz = I;
    char *pp = (char *)(&p->x);
    ssize_t write_size = 0;
    while (sz > 0) {
        write_size = write(fd, pp, sz);
        pp += write_size;
        sz -= write_size;
    }
    write_size = 0;
    pp = (char *)(&p->y);
    sz = LL;
    while (sz > 0) {
        write_size = write(fd, pp, sz);
        pp += write_size;
        sz -= write_size;
    }
}

//обход каталогов
int
main(int argc,const char *argv[])
{
    char path[PATH_MAX] = {};
    struct stat stb;
    DIR *d = opendir(argv[1]);
    struct dirent *dd = NULL;
    long long size = 0;
    while ((dd = readdir(d)) != NULL) {
        if (!strcmp(dd->d_name, ".") || !strcmp(dd->d_name, "..")) {
            continue;
        }
        snprintf(path, sizeof(path), "%s/%s", argv[1], dd->d_name);
        if ((lstat(path, &stb) != -1) && S_ISREG(stb.st_mode)) {
            size += stb.st_size;
        }
    }
    printf("%lld\n", size);
    closedir(d);
    return 0;
}

stb {
st_dev - номер
st_ino - номер инд дескриптора
st_mode - права доступа + тип - права = st_mode &077777
st_nref - счетчик ссылок
st_size - размер
st_uid - id
st_gid - gid
st_mtime - дата модификации
st_atime - дата доступа
st_ctime - дата создания
}

//команды
int fd = open(argv[1], O_RDONLY);
O_WRONLY
O_RDWR

lseek(fd, sizeof(pp) * index, SEEK_SET);
возращает с начала!!!

close(fd);

read_size = read(fd, pp, sz);

write_size = write(fd, pp, sz);
        
S_ISREG(stb.st_mode)
S_ISDIR(stb.st_mode)
S_ISLINK(stb.st_mode)
S_ISBLK(stb.st_mode)

lstat(path, &stb) //не переходит по ссылкам
stat(path, &stb) //переходит по ссылкам
fstat(fd, &stb) //по фд

mkdir
rmdir
unlink
link
symlink
readlink
rename


CC = gcc
CFLAGS = -Wall -O2
LDFLAGS = -s
CFILES = arthur.c trillian.c prosser.c
HFILES = arthur.h trillian.h prosser.h
OBJECTS = $(CFILES:.c=.o)
TARGET = earth
all : $(TARGET)
earth : $(OBJECTS)
	$(CC) $(LDFLAGS) $^ -o $@
include deps.make
deps.make : $(CFILES) $(HFILES)
	gcc -MM $(CFILES) > deps.make
clean :
	rm -f $(TARGET) *.o 


//random number [low, high)
#include <stdio.h>
#include <stdlib.h>
#include <signal.h>
double ran = rand() / (RAND_MAX + 1.0);
printf("%ld\n", (int)(ran * (high - low)) + low);

//строка параметр 
const unsigned char *
// cтрока результат 
unsigned char * или char *
char *strdup(char *)//потом free
fgets, snprintf, sscanf

//vector
int *v = 0;
int a = 0;
int u = 0;
int x;
while (scanf("%d", &x) == 1) {
    if (u == a) {
        if(!(a*=2)) a = 16;
        v = realloc(v, a * sizeof(v[0]));
    }
    v[u + 1] = x;
}

//time
time_t tme;
time_t time (time_t *) //текущее время time(tme);
struct tm * localtime(time_t *)
gmtime
//считать и вывести время
    time_t tm = time(NULL);
    struct tm *timestr;
    timestr = localtime(&tm);
    tm = mktime(timestr);
    printf("%lld", (long long int)tm);

tm {
tm_year +1900
tm_mon +1
tm_mday 1:31
tm_hour 0:23
tm_min 0:59
tm_sec 0:59
tm_isdst -1 all 0 - зимнее 1 - летнее
tm_wday 1:7
tm_yday 1:365
}

ctime(t) - круто


не забываем fflush(stdout)

WIFEXITED(stat); true - exit
WIFSIGNALED(stat); true - signal
WIFEXITSTATUS(stat); 0..255 stat
WTERMSIG(stat); 0..255 SIGNUM

WIFEXITED(stat) && !WEXITSTATUS(stat);
waitpid - WNOHANG

while (waitpid(-1), &stat, WNOHANG){
    // есть завершившийся процесс
}


//
1. Стоит закрывать как можно быстрее те части pipe'ов, которые вам в этом месте больше не нужны. иначе вероятен deadlock
2. Программы в pipeline работают параллельно, ввод-вывод между ними происходит через n-1 независимых pipe'ов.
3. pause — плохая идея для синхронизации процессов, поскольку она не поможет вам поймать пропустить сигнал(ы), пришедшие в момент непосредственно перед её вызовом.
4. fflush
5. volatile
6. Pid и race condition


SIGCHLD
SIGPIPE
SIGUSR1
SIGUSR2
SIGTERM
SIGINT
SIGABRT
SIGALRM
// пинг понг - 8-4 и 9-4

// как открывать файлы
fd = open("input.txt", O_WRONLY | O_TRUNC | O_CREAT, 0666);
fd = open("input.txt", O_WRONLY | O_APPEND | O_CREAT, 0666);

//dup2 делается так в pipe 
dup2(pfd[0], 0);
dup2(pfd[1], 1);
//в файлы
dup2(fdin, 0);
dup2(fdout, 1);



// выполнит процесс и обработает ошибки (средне работает)
int execute(char * proc) 
{ 
    int flag;
    int pid;
    int status;
    if ((pid = fork())) {
        wait(&status);
        if WIFSIGNALED(status) return 1;
        if WIFEXITED(status) {
        flag = WEXITSTATUS(status);
        } else return 1;
    } else {
        //child
        execlp("/bin/sh", "/bin/sh", "-c", proc, NULL);
        return 1;
    }
    return flag;
}

// проверка на ошибки у процесса
if (!WIFEXITED(status) || WEXITSTATUS(status)) {
    exit(1);
}
WIFSIGNALLED

// решает проблемы с зомби
while (wait(NULL) != -1);


// обработчики сигналлов
void hnd(int s) {}

signal(SIGUSR1, hnd);
signal(SIGUSR1, SIG_DFL); // стандартный
signal(SIGUSR1, SIG_IGN); // игнорировать

//ключик
key_t key = ftok("sync", 123123);

//разделяемая память
shmid = shmget(key, SIZE, IPC_CREAT | 0666);
str = (char *)shmat(shmid, NULL, 0);
int *num_arr = (int *)shmat(shmid, NULL, 0);
shmdt(str);
shmctl(shmid, IPC_RMID, NULL);

//массив семафоров
int semid = semget(key, 2, IPC_CREAT | 0666);
semctl(semid, 0, SETVAL, 1);
semctl(semid, 0, SETALL, arr);
semop(semid, (struct sembuf []){{ 0, -1, SEM_UNDO }}, 1);
semop(semid, (struct sembuf []) {{ 1, 1, SEM_UNDO }}, 1);
semctl(semid, 0, IPC_RMID, 0);


// очереди сообщений
struct msgbuf {
    long mtype;
    char mtext[1024];
};
struct msgbuf rcv;



int msgid1 = msgget(key1, IPC_CREAT | 0666);
snd.mtype = 1;
sprintf(snd.mtext, "%d", num + 1);
msgsnd(msgid2, &snd, sizeof(snd.mtext), 0);
msgrcv(msgid1, &rcv, sizeof(rcv.mtext), 0, 0);
sscanf(rcv.mtext, "%d", &num);
msgctl(msgid1, IPC_RMID, 0);


